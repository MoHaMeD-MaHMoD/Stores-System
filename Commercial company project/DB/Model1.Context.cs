//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Commercial_company_project.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MOhamedEntities3 : DbContext
    {
        public MOhamedEntities3()
            : base("name=MOhamedEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<MeasruingUnit> MeasruingUnits { get; set; }
        public virtual DbSet<ResponsiblePerson> ResponsiblePersons { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SupplyPermission> SupplyPermissions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TransferItem> TransferItems { get; set; }
        public virtual DbSet<WithdrawPermission> WithdrawPermissions { get; set; }
    
        public virtual ObjectResult<GetExpairyDate_Result> GetExpairyDate(Nullable<int> yoursTimeDurationInDays)
        {
            var yoursTimeDurationInDaysParameter = yoursTimeDurationInDays.HasValue ?
                new ObjectParameter("YoursTimeDurationInDays", yoursTimeDurationInDays) :
                new ObjectParameter("YoursTimeDurationInDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExpairyDate_Result>("GetExpairyDate", yoursTimeDurationInDaysParameter);
        }
    
        public virtual ObjectResult<getMesaringUnits_Result> getMesaringUnits(Nullable<int> iID)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("IID", iID) :
                new ObjectParameter("IID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getMesaringUnits_Result>("getMesaringUnits", iIDParameter);
        }
    
        public virtual ObjectResult<getTimeInstore_Result> getTimeInstore(Nullable<int> yourTimeDurationInDays)
        {
            var yourTimeDurationInDaysParameter = yourTimeDurationInDays.HasValue ?
                new ObjectParameter("YourTimeDurationInDays", yourTimeDurationInDays) :
                new ObjectParameter("YourTimeDurationInDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTimeInstore_Result>("getTimeInstore", yourTimeDurationInDaysParameter);
        }
    
        public virtual ObjectResult<getTransferItems_Result> getTransferItems(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTransferItems_Result>("getTransferItems", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<itemInStoresIn_Result> itemInStoresIn(Nullable<int> itemID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<itemInStoresIn_Result>("itemInStoresIn", itemIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<StoreItemIn_Result> StoreItemIn(Nullable<int> sID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StoreItemIn_Result>("StoreItemIn", sIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<supplyin_Result> supplyin(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyin_Result>("supplyin", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<supplyout_Result> supplyout(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyout_Result>("supplyout", fromDateParameter, toDateParameter);
        }
    }
}
